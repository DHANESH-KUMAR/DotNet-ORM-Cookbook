using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace Recipes.ModelWithLookup
{
    /// <summary>
    /// This scenario performs basic CRUD operations on a model containing a foreign key represented by a model.
    /// </summary>
    /// <typeparam name="TModel">An Employee model or entity</typeparam>
    [TestCategory("ModelWithLookupComplex")]
    public abstract class ModelWithLookupComplexTests<TModel> : TestBase
        where TModel : class, IEmployeeComplex, new()
    {
        /// <summary>
        /// Create and delete a row.
        /// </summary>
        [TestMethod]
        public void CreateAndDelete()
        {
            var repository = GetScenario();

            var employeeClassification = repository.GetClassification(2);
            Assert.IsNotNull(employeeClassification);

            var newRecord = new TModel
            {
                FirstName = "Test",
                MiddleName = "A",
                LastName = "Person " + DateTime.Now.Ticks,
                EmployeeClassification = employeeClassification
            };
            var newKey = repository.Create(newRecord);
            Assert.IsTrue(newKey >= 1000, "keys under 1000 were not generated by the database");

            var echo = repository.GetByKey(newKey);
            Assert.IsNotNull(echo);
            Assert.AreEqual(newKey, echo!.EmployeeKey);
            Assert.AreEqual(newRecord.FirstName, echo.FirstName);
            Assert.AreEqual(newRecord.LastName, echo.LastName);
            Assert.IsNotNull(echo.EmployeeClassification);
            Assert.AreEqual(newRecord.EmployeeClassification!.EmployeeClassificationKey, echo.EmployeeClassification!.EmployeeClassificationKey);

            repository.Delete(echo);

            Assert.IsNull(repository.GetByKey(newKey), "Employee record should have been deleted.");

            var employeeClassification2 = repository.GetClassification(2);
            Assert.IsNotNull(employeeClassification2, "Delete method should not delete the EmployeeClassification record");
        }

        /// <summary>
        /// Create and delete a row.
        /// </summary>
        [TestMethod]
        public void CreateAndDeleteByKey()
        {
            var repository = GetScenario();

            var employeeClassification = repository.GetClassification(2);
            Assert.IsNotNull(employeeClassification);

            var newRecord = new TModel
            {
                FirstName = "Test",
                MiddleName = "A",
                LastName = "Person " + DateTime.Now.Ticks,
                EmployeeClassification = employeeClassification
            };
            var newKey = repository.Create(newRecord);
            Assert.IsTrue(newKey >= 1000, "keys under 1000 were not generated by the database");

            var echo = repository.GetByKey(newKey);
            Assert.IsNotNull(echo);
            Assert.AreEqual(newKey, echo!.EmployeeKey);
            Assert.AreEqual(newRecord.FirstName, echo.FirstName);
            Assert.AreEqual(newRecord.LastName, echo.LastName);
            Assert.IsNotNull(echo.EmployeeClassification);
            Assert.AreEqual(newRecord.EmployeeClassification!.EmployeeClassificationKey, echo.EmployeeClassification!.EmployeeClassificationKey);

            repository.DeleteByKey(newKey);

            Assert.IsNull(repository.GetByKey(newKey), "Employee record should have been deleted.");

            var employeeClassification2 = repository.GetClassification(2);
            Assert.IsNotNull(employeeClassification2, "Delete method should not delete the EmployeeClassification record");
        }

        /// <summary>
        /// Create and read back a row.
        /// </summary>
        [TestMethod]
        public void CreateAndReadBack()
        {
            var repository = GetScenario();

            var employeeClassification = repository.GetClassification(2);
            Assert.IsNotNull(employeeClassification);

            var newRecord = new TModel
            {
                FirstName = "Test",
                MiddleName = "A",
                LastName = "Person " + DateTime.Now.Ticks,
                EmployeeClassification = employeeClassification
            };
            var newKey = repository.Create(newRecord);
            Assert.IsTrue(newKey >= 1000, "keys under 1000 were not generated by the database");

            var echo = repository.GetByKey(newKey);
            Assert.IsNotNull(echo);
            Assert.AreEqual(newKey, echo!.EmployeeKey);
            Assert.AreEqual(newRecord.FirstName, echo.FirstName);
            Assert.AreEqual(newRecord.LastName, echo.LastName);
            Assert.IsNotNull(echo.EmployeeClassification);
            Assert.AreEqual(newRecord.EmployeeClassification!.EmployeeClassificationKey, echo.EmployeeClassification!.EmployeeClassificationKey);
            Assert.AreEqual(employeeClassification!.EmployeeClassificationName, echo.EmployeeClassification!.EmployeeClassificationName);
        }

        /// <summary>
        /// Create and update a row.
        /// </summary>
        [TestMethod]
        public void CreateAndUpdate()
        {
            var repository = GetScenario();

            var employeeClassification = repository.GetClassification(2);
            Assert.IsNotNull(employeeClassification);

            var newRecord = new TModel
            {
                FirstName = "Test",
                MiddleName = "A",
                LastName = "Person " + DateTime.Now.Ticks,
                EmployeeClassification = employeeClassification
            };
            var newKey = repository.Create(newRecord);
            Assert.IsTrue(newKey >= 1000, "keys under 1000 were not generated by the database");

            var echo = repository.GetByKey(newKey);
            Assert.IsNotNull(echo);
            Assert.AreEqual(newKey, echo!.EmployeeKey);
            Assert.AreEqual(newRecord.FirstName, echo.FirstName);
            Assert.AreEqual(newRecord.LastName, echo.LastName);
            Assert.IsNotNull(echo.EmployeeClassification);
            Assert.AreEqual(newRecord.EmployeeClassification!.EmployeeClassificationKey, echo.EmployeeClassification!.EmployeeClassificationKey);
            Assert.AreEqual(employeeClassification!.EmployeeClassificationName, echo.EmployeeClassification!.EmployeeClassificationName);

            var updatedEmployeeClassification = repository.GetClassification(4);
            Assert.IsNotNull(updatedEmployeeClassification);

            echo.EmployeeClassification = updatedEmployeeClassification;
            repository.Update(echo);

            var echo2 = repository.GetByKey(newKey);
            Assert.IsNotNull(echo2);
            Assert.AreEqual(newKey, echo2!.EmployeeKey);
            Assert.AreEqual(echo.FirstName, echo2.FirstName);
            Assert.AreEqual(echo.LastName, echo2.LastName);
            Assert.IsNotNull(echo2.EmployeeClassification);
            Assert.AreEqual(echo.EmployeeClassification!.EmployeeClassificationKey, echo2.EmployeeClassification!.EmployeeClassificationKey);
            Assert.AreEqual(updatedEmployeeClassification!.EmployeeClassificationName, echo2.EmployeeClassification!.EmployeeClassificationName);
        }

        /// <summary>
        /// Attempt to foul a lookup table via a create or update operation.
        /// </summary>
        [TestMethod]
        public void FoulLookupTable()
        {
            var repository = GetScenario();

            var employeeClassification = repository.GetClassification(1);
            Assert.IsNotNull(employeeClassification);
            var employeeClassificationName = employeeClassification!.EmployeeClassificationName;//Capture the original name;

            employeeClassification.EmployeeClassificationName = "XXX" + DateTime.Now.Ticks; //Modify the name. This shouldn't be saved.

            var newRecord = new TModel
            {
                FirstName = "Test",
                MiddleName = "A",
                LastName = "Person " + DateTime.Now.Ticks,
                EmployeeClassification = employeeClassification
            };
            var newKey = repository.Create(newRecord);
            Assert.IsTrue(newKey >= 1000, "keys under 1000 were not generated by the database");

            var echo = repository.GetByKey(newKey);
            Assert.IsNotNull(echo);
            Assert.AreEqual(newKey, echo!.EmployeeKey);
            Assert.AreEqual(newRecord.FirstName, echo.FirstName);
            Assert.AreEqual(newRecord.LastName, echo.LastName);
            Assert.IsNotNull(echo.EmployeeClassification);
            Assert.AreEqual(newRecord.EmployeeClassification!.EmployeeClassificationKey, echo.EmployeeClassification!.EmployeeClassificationKey);
            Assert.AreEqual(employeeClassificationName, echo.EmployeeClassification!.EmployeeClassificationName);

            var updatedEmployeeClassification = repository.GetClassification(4);
            Assert.IsNotNull(updatedEmployeeClassification);
            var updatedEmployeeClassificationName = updatedEmployeeClassification!.EmployeeClassificationName;//Capture the original name;

            updatedEmployeeClassification.EmployeeClassificationName = "XXX" + DateTime.Now.Ticks; //Modify the name. This shouldn't be saved.

            echo.EmployeeClassification = updatedEmployeeClassification;
            repository.Update(echo);

            var echo2 = repository.GetByKey(newKey);
            Assert.IsNotNull(echo2);
            Assert.AreEqual(newKey, echo2!.EmployeeKey);
            Assert.AreEqual(echo.FirstName, echo2.FirstName);
            Assert.AreEqual(echo.LastName, echo2.LastName);
            Assert.IsNotNull(echo2.EmployeeClassification);
            Assert.AreEqual(echo.EmployeeClassification!.EmployeeClassificationKey, echo2.EmployeeClassification!.EmployeeClassificationKey);
            Assert.AreEqual(updatedEmployeeClassificationName, echo2.EmployeeClassification!.EmployeeClassificationName);
        }

        protected abstract IModelWithLookupComplexScenario<TModel> GetScenario();
    }
}
